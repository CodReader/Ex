/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 * <p>
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 * <p>
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bogdan.liferay.horseapp.service.model.impl;

import com.bogdan.liferay.horseapp.service.model.HorseEntry;
import com.bogdan.liferay.horseapp.service.model.HorseEntryModel;
import com.bogdan.liferay.horseapp.service.model.HorseEntrySoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;
import java.sql.Types;
import java.util.*;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the HorseEntry service. Represents a row in the &quot;FOO_HorseEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>HorseEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HorseEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @generated
 * @see HorseEntryImpl
 */
@JSON(strict = true)
public class HorseEntryModelImpl
        extends BaseModelImpl<HorseEntry> implements HorseEntryModel {

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a horse entry model instance should use the <code>HorseEntry</code> interface instead.
     */
    public static final String TABLE_NAME = "FOO_HorseEntry";

    public static final Object[][] TABLE_COLUMNS = {
            {"uuid_", Types.VARCHAR}, {"entryId", Types.BIGINT},
            {"modelSpeed", Types.INTEGER}
    };

    public static final Map<String, Integer> TABLE_COLUMNS_MAP =
            new HashMap<String, Integer>();
    public static final String TABLE_SQL_CREATE =
            "create table FOO_HorseEntry (uuid_ VARCHAR(75) null,entryId LONG not null primary key,modelSpeed INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table FOO_HorseEntry";
    public static final String ORDER_BY_JPQL =
            " ORDER BY horseEntry.entryId ASC";
    public static final String ORDER_BY_SQL =
            " ORDER BY FOO_HorseEntry.entryId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    /**
     * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
     */
    @Deprecated
    public static final long UUID_COLUMN_BITMASK = 1L;
    /**
     * @deprecated As of Athanasius (7.3.x), replaced by {@link
     * #getColumnBitmask(String)}
     */
    @Deprecated
    public static final long ENTRYID_COLUMN_BITMASK = 2L;
    private static final Map<String, Function<HorseEntry, Object>>
            _attributeGetterFunctions;
    private static final Map<String, BiConsumer<HorseEntry, Object>>
            _attributeSetterBiConsumers;
    private static final Map<String, String> _attributeNames;
    private static final Map<String, Long> _columnBitmasks;

    static {
        TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
        TABLE_COLUMNS_MAP.put("entryId", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("modelSpeed", Types.INTEGER);
    }

    static {
        Map<String, Function<HorseEntry, Object>> attributeGetterFunctions =
                new LinkedHashMap<String, Function<HorseEntry, Object>>();
        Map<String, BiConsumer<HorseEntry, ?>> attributeSetterBiConsumers =
                new LinkedHashMap<String, BiConsumer<HorseEntry, ?>>();

        attributeGetterFunctions.put("uuid", HorseEntry::getUuid);
        attributeSetterBiConsumers.put(
                "uuid", (BiConsumer<HorseEntry, String>) HorseEntry::setUuid);
        attributeGetterFunctions.put("entryId", HorseEntry::getEntryId);
        attributeSetterBiConsumers.put(
                "entryId", (BiConsumer<HorseEntry, Long>) HorseEntry::setEntryId);
        attributeGetterFunctions.put("modelSpeed", HorseEntry::getModelSpeed);
        attributeSetterBiConsumers.put(
                "modelSpeed",
                (BiConsumer<HorseEntry, Integer>) HorseEntry::setModelSpeed);

        _attributeGetterFunctions = Collections.unmodifiableMap(
                attributeGetterFunctions);
        _attributeSetterBiConsumers = Collections.unmodifiableMap(
                (Map) attributeSetterBiConsumers);
    }

    static {
        Map<String, String> attributeNames = new HashMap<>();

        attributeNames.put("uuid_", "uuid");

        _attributeNames = Collections.unmodifiableMap(attributeNames);
    }

    static {
        Map<String, Long> columnBitmasks = new HashMap<>();

        columnBitmasks.put("uuid_", 1L);

        columnBitmasks.put("entryId", 2L);

        columnBitmasks.put("modelSpeed", 4L);

        _columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
    }

    private String _uuid;
    private long _entryId;
    private int _modelSpeed;
    private transient Map<String, Object> _columnOriginalValues;
    private long _columnBitmask;
    private HorseEntry _escapedModel;

    public HorseEntryModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     * @deprecated As of Athanasius (7.3.x), with no direct replacement
     */
    @Deprecated
    public static HorseEntry toModel(HorseEntrySoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        HorseEntry model = new HorseEntryImpl();

        model.setUuid(soapModel.getUuid());
        model.setEntryId(soapModel.getEntryId());
        model.setModelSpeed(soapModel.getModelSpeed());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     * @deprecated As of Athanasius (7.3.x), with no direct replacement
     */
    @Deprecated
    public static List<HorseEntry> toModels(HorseEntrySoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<HorseEntry> models = new ArrayList<HorseEntry>(soapModels.length);

        for (HorseEntrySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    private static Function<InvocationHandler, HorseEntry>
    _getProxyProviderFunction() {

        Class<?> proxyClass = ProxyUtil.getProxyClass(
                HorseEntry.class.getClassLoader(), HorseEntry.class,
                ModelWrapper.class);

        try {
            Constructor<HorseEntry> constructor =
                    (Constructor<HorseEntry>) proxyClass.getConstructor(
                            InvocationHandler.class);

            return invocationHandler -> {
                try {
                    return constructor.newInstance(invocationHandler);
                } catch (ReflectiveOperationException
                        reflectiveOperationException) {

                    throw new InternalError(reflectiveOperationException);
                }
            };
        } catch (NoSuchMethodException noSuchMethodException) {
            throw new InternalError(noSuchMethodException);
        }
    }

    public static long getColumnBitmask(String columnName) {
        return _columnBitmasks.get(columnName);
    }

    @Override
    public long getPrimaryKey() {
        return _entryId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setEntryId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _entryId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return HorseEntry.class;
    }

    @Override
    public String getModelClassName() {
        return HorseEntry.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        Map<String, Function<HorseEntry, Object>> attributeGetterFunctions =
                getAttributeGetterFunctions();

        for (Map.Entry<String, Function<HorseEntry, Object>> entry :
                attributeGetterFunctions.entrySet()) {

            String attributeName = entry.getKey();
            Function<HorseEntry, Object> attributeGetterFunction =
                    entry.getValue();

            attributes.put(
                    attributeName, attributeGetterFunction.apply((HorseEntry) this));
        }

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Map<String, BiConsumer<HorseEntry, Object>> attributeSetterBiConsumers =
                getAttributeSetterBiConsumers();

        for (Map.Entry<String, Object> entry : attributes.entrySet()) {
            String attributeName = entry.getKey();

            BiConsumer<HorseEntry, Object> attributeSetterBiConsumer =
                    attributeSetterBiConsumers.get(attributeName);

            if (attributeSetterBiConsumer != null) {
                attributeSetterBiConsumer.accept(
                        (HorseEntry) this, entry.getValue());
            }
        }
    }

    public Map<String, Function<HorseEntry, Object>>
    getAttributeGetterFunctions() {

        return _attributeGetterFunctions;
    }

    public Map<String, BiConsumer<HorseEntry, Object>>
    getAttributeSetterBiConsumers() {

        return _attributeSetterBiConsumers;
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return "";
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _uuid = uuid;
    }

    /**
     * @deprecated As of Athanasius (7.3.x), replaced by {@link
     * #getColumnOriginalValue(String)}
     */
    @Deprecated
    public String getOriginalUuid() {
        return getColumnOriginalValue("uuid_");
    }

    @JSON
    @Override
    public long getEntryId() {
        return _entryId;
    }

    @Override
    public void setEntryId(long entryId) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _entryId = entryId;
    }

    @JSON
    @Override
    public int getModelSpeed() {
        return _modelSpeed;
    }

    @Override
    public void setModelSpeed(int modelSpeed) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _modelSpeed = modelSpeed;
    }

    public long getColumnBitmask() {
        if (_columnBitmask > 0) {
            return _columnBitmask;
        }

        if ((_columnOriginalValues == null) ||
                (_columnOriginalValues == Collections.EMPTY_MAP)) {

            return 0;
        }

        for (Map.Entry<String, Object> entry :
                _columnOriginalValues.entrySet()) {

            if (!Objects.equals(
                    entry.getValue(), getColumnValue(entry.getKey()))) {

                _columnBitmask |= _columnBitmasks.get(entry.getKey());
            }
        }

        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(
                0, HorseEntry.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public HorseEntry toEscapedModel() {
        if (_escapedModel == null) {
            Function<InvocationHandler, HorseEntry>
                    escapedModelProxyProviderFunction =
                    EscapedModelProxyProviderFunctionHolder.
                            _escapedModelProxyProviderFunction;

            _escapedModel = escapedModelProxyProviderFunction.apply(
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        HorseEntryImpl horseEntryImpl = new HorseEntryImpl();

        horseEntryImpl.setUuid(getUuid());
        horseEntryImpl.setEntryId(getEntryId());
        horseEntryImpl.setModelSpeed(getModelSpeed());

        horseEntryImpl.resetOriginalValues();

        return horseEntryImpl;
    }

    @Override
    public int compareTo(HorseEntry horseEntry) {
        long primaryKey = horseEntry.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }

        if (!(object instanceof HorseEntry)) {
            return false;
        }

        HorseEntry horseEntry = (HorseEntry) object;

        long primaryKey = horseEntry.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    /**
     * @deprecated As of Athanasius (7.3.x), with no direct replacement
     */
    @Deprecated
    @Override
    public boolean isEntityCacheEnabled() {
        return true;
    }

    /**
     * @deprecated As of Athanasius (7.3.x), with no direct replacement
     */
    @Deprecated
    public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
    }

    /**
     * @deprecated As of Athanasius (7.3.x), with no direct replacement
     */
    @Deprecated
    @Override
    public boolean isFinderCacheEnabled() {
        return true;
    }

    /**
     * @deprecated As of Athanasius (7.3.x), with no direct replacement
     */
    @Deprecated
    public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
    }

    @Override
    public void resetOriginalValues() {
        _columnOriginalValues = Collections.emptyMap();

        _columnBitmask = 0;
    }

    @Override
    public CacheModel<HorseEntry> toCacheModel() {
        HorseEntryCacheModel horseEntryCacheModel = new HorseEntryCacheModel();

        horseEntryCacheModel.uuid = getUuid();

        String uuid = horseEntryCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            horseEntryCacheModel.uuid = null;
        }

        horseEntryCacheModel.entryId = getEntryId();

        horseEntryCacheModel.modelSpeed = getModelSpeed();

        return horseEntryCacheModel;
    }

    @Override
    public String toString() {
        Map<String, Function<HorseEntry, Object>> attributeGetterFunctions =
                getAttributeGetterFunctions();

        StringBundler sb = new StringBundler(
                (4 * attributeGetterFunctions.size()) + 2);

        sb.append("{");

        for (Map.Entry<String, Function<HorseEntry, Object>> entry :
                attributeGetterFunctions.entrySet()) {

            String attributeName = entry.getKey();
            Function<HorseEntry, Object> attributeGetterFunction =
                    entry.getValue();

            sb.append(attributeName);
            sb.append("=");
            sb.append(attributeGetterFunction.apply((HorseEntry) this));
            sb.append(", ");
        }

        if (sb.index() > 1) {
            sb.setIndex(sb.index() - 1);
        }

        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        Map<String, Function<HorseEntry, Object>> attributeGetterFunctions =
                getAttributeGetterFunctions();

        StringBundler sb = new StringBundler(
                (5 * attributeGetterFunctions.size()) + 4);

        sb.append("<model><model-name>");
        sb.append(getModelClassName());
        sb.append("</model-name>");

        for (Map.Entry<String, Function<HorseEntry, Object>> entry :
                attributeGetterFunctions.entrySet()) {

            String attributeName = entry.getKey();
            Function<HorseEntry, Object> attributeGetterFunction =
                    entry.getValue();

            sb.append("<column><column-name>");
            sb.append(attributeName);
            sb.append("</column-name><column-value><![CDATA[");
            sb.append(attributeGetterFunction.apply((HorseEntry) this));
            sb.append("]]></column-value></column>");
        }

        sb.append("</model>");

        return sb.toString();
    }

    public <T> T getColumnValue(String columnName) {
        columnName = _attributeNames.getOrDefault(columnName, columnName);

        Function<HorseEntry, Object> function = _attributeGetterFunctions.get(
                columnName);

        if (function == null) {
            throw new IllegalArgumentException(
                    "No attribute getter function found for " + columnName);
        }

        return (T) function.apply((HorseEntry) this);
    }

    public <T> T getColumnOriginalValue(String columnName) {
        if (_columnOriginalValues == null) {
            return null;
        }

        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        return (T) _columnOriginalValues.get(columnName);
    }

    private void _setColumnOriginalValues() {
        _columnOriginalValues = new HashMap<String, Object>();

        _columnOriginalValues.put("uuid_", _uuid);
        _columnOriginalValues.put("entryId", _entryId);
        _columnOriginalValues.put("modelSpeed", _modelSpeed);
    }

    private static class EscapedModelProxyProviderFunctionHolder {

        private static final Function<InvocationHandler, HorseEntry>
                _escapedModelProxyProviderFunction = _getProxyProviderFunction();

    }

}