/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 * <p>
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 * <p>
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bogdan.liferay.horseapp.service.service.base;

import com.bogdan.liferay.horseapp.service.model.HorseEntry;
import com.bogdan.liferay.horseapp.service.service.HorseEntryService;
import com.bogdan.liferay.horseapp.service.service.HorseEntryServiceUtil;
import com.bogdan.liferay.horseapp.service.service.persistence.FooPersistence;
import com.bogdan.liferay.horseapp.service.service.persistence.HorseEntryPersistence;
import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.service.BaseServiceImpl;
import com.liferay.portal.kernel.util.PortalUtil;
import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;

import javax.sql.DataSource;
import java.lang.reflect.Field;

/**
 * Provides the base implementation for the horse entry remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.bogdan.liferay.horseapp.service.service.impl.HorseEntryServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @generated
 * @see com.bogdan.liferay.horseapp.service.service.impl.HorseEntryServiceImpl
 */
public abstract class HorseEntryServiceBaseImpl
        extends BaseServiceImpl
        implements AopService, HorseEntryService, IdentifiableOSGiService {

    @Reference
    protected FooPersistence fooPersistence;
    @Reference
    protected com.bogdan.liferay.horseapp.service.service.HorseEntryLocalService
            horseEntryLocalService;
    protected HorseEntryService horseEntryService;
    @Reference
    protected HorseEntryPersistence horseEntryPersistence;
    @Reference
    protected com.liferay.counter.kernel.service.CounterLocalService
            counterLocalService;
    @Reference
    protected com.liferay.portal.kernel.service.ClassNameLocalService
            classNameLocalService;
    @Reference
    protected com.liferay.portal.kernel.service.ClassNameService
            classNameService;
    @Reference
    protected com.liferay.portal.kernel.service.ResourceLocalService
            resourceLocalService;
    @Reference
    protected com.liferay.portal.kernel.service.UserLocalService
            userLocalService;
    @Reference
    protected com.liferay.portal.kernel.service.UserService userService;

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Use <code>HorseEntryService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>HorseEntryServiceUtil</code>.
     */
    @Deactivate
    protected void deactivate() {
        _setServiceUtilService(null);
    }

    @Override
    public Class<?>[] getAopInterfaces() {
        return new Class<?>[]{
                HorseEntryService.class, IdentifiableOSGiService.class
        };
    }

    @Override
    public void setAopProxy(Object aopProxy) {
        horseEntryService = (HorseEntryService) aopProxy;

        _setServiceUtilService(horseEntryService);
    }

    /**
     * Returns the OSGi service identifier.
     *
     * @return the OSGi service identifier
     */
    @Override
    public String getOSGiServiceIdentifier() {
        return HorseEntryService.class.getName();
    }

    protected Class<?> getModelClass() {
        return HorseEntry.class;
    }

    protected String getModelClassName() {
        return HorseEntry.class.getName();
    }

    /**
     * Performs a SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) {
        try {
            DataSource dataSource = horseEntryPersistence.getDataSource();

            DB db = DBManagerUtil.getDB();

            sql = db.buildSQL(sql);
            sql = PortalUtil.transformSQL(sql);

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
                    dataSource, sql);

            sqlUpdate.update();
        } catch (Exception exception) {
            throw new SystemException(exception);
        }
    }

    private void _setServiceUtilService(HorseEntryService horseEntryService) {
        try {
            Field field = HorseEntryServiceUtil.class.getDeclaredField(
                    "_service");

            field.setAccessible(true);

            field.set(null, horseEntryService);
        } catch (ReflectiveOperationException reflectiveOperationException) {
            throw new RuntimeException(reflectiveOperationException);
        }
    }

}