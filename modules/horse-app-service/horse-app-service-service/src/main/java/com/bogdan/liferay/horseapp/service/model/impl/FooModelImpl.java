/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 * <p>
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 * <p>
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bogdan.liferay.horseapp.service.model.impl;

import com.bogdan.liferay.horseapp.service.model.Foo;
import com.bogdan.liferay.horseapp.service.model.FooModel;
import com.bogdan.liferay.horseapp.service.service.persistence.FooPK;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;
import java.sql.Types;
import java.util.*;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Foo service. Represents a row in the &quot;foo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FooModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FooImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @generated
 * @see FooImpl
 */
public class FooModelImpl extends BaseModelImpl<Foo> implements FooModel {

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a foo model instance should use the <code>Foo</code> interface instead.
     */
    public static final String TABLE_NAME = "foo";

    public static final Object[][] TABLE_COLUMNS = {
            {"fooId", Types.BIGINT}, {"groupId", Types.BIGINT},
            {"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
            {"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
            {"modifiedDate", Types.TIMESTAMP}, {"id_", Types.BIGINT},
            {"modelSpeed", Types.INTEGER}, {"field1", Types.VARCHAR},
            {"field2", Types.BOOLEAN}, {"field3", Types.INTEGER},
            {"field4", Types.TIMESTAMP}, {"field5", Types.VARCHAR},
            {"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
            {"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP}
    };

    public static final Map<String, Integer> TABLE_COLUMNS_MAP =
            new HashMap<String, Integer>();
    public static final String TABLE_SQL_CREATE =
            "create table foo (fooId LONG not null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,id_ LONG not null,modelSpeed INTEGER,field1 VARCHAR(75) null,field2 BOOLEAN,field3 INTEGER,field4 DATE null,field5 VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,primary key (fooId, id_))";
    public static final String TABLE_SQL_DROP = "drop table foo";
    public static final String ORDER_BY_JPQL = " ORDER BY foo.field1 ASC";
    public static final String ORDER_BY_SQL = " ORDER BY foo.field1 ASC";
    public static final String DATA_SOURCE = "sampleDataSource";
    public static final String SESSION_FACTORY = "sampleSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    /**
     * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
     */
    @Deprecated
    public static final long FIELD2_COLUMN_BITMASK = 1L;
    /**
     * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
     */
    @Deprecated
    public static final long ID_COLUMN_BITMASK = 2L;
    /**
     * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
     */
    @Deprecated
    public static final long MODELSPEED_COLUMN_BITMASK = 4L;
    /**
     * @deprecated As of Athanasius (7.3.x), replaced by {@link
     * #getColumnBitmask(String)}
     */
    @Deprecated
    public static final long FIELD1_COLUMN_BITMASK = 8L;
    private static final Map<String, Function<Foo, Object>>
            _attributeGetterFunctions;
    private static final Map<String, BiConsumer<Foo, Object>>
            _attributeSetterBiConsumers;
    private static final Map<String, String> _attributeNames;
    private static final Map<String, Long> _columnBitmasks;

    static {
        TABLE_COLUMNS_MAP.put("fooId", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
        TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
        TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
        TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("modelSpeed", Types.INTEGER);
        TABLE_COLUMNS_MAP.put("field1", Types.VARCHAR);
        TABLE_COLUMNS_MAP.put("field2", Types.BOOLEAN);
        TABLE_COLUMNS_MAP.put("field3", Types.INTEGER);
        TABLE_COLUMNS_MAP.put("field4", Types.TIMESTAMP);
        TABLE_COLUMNS_MAP.put("field5", Types.VARCHAR);
        TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
        TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
        TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
        TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
    }

    static {
        Map<String, Function<Foo, Object>> attributeGetterFunctions =
                new LinkedHashMap<String, Function<Foo, Object>>();
        Map<String, BiConsumer<Foo, ?>> attributeSetterBiConsumers =
                new LinkedHashMap<String, BiConsumer<Foo, ?>>();

        attributeGetterFunctions.put("fooId", Foo::getFooId);
        attributeSetterBiConsumers.put(
                "fooId", (BiConsumer<Foo, Long>) Foo::setFooId);
        attributeGetterFunctions.put("groupId", Foo::getGroupId);
        attributeSetterBiConsumers.put(
                "groupId", (BiConsumer<Foo, Long>) Foo::setGroupId);
        attributeGetterFunctions.put("companyId", Foo::getCompanyId);
        attributeSetterBiConsumers.put(
                "companyId", (BiConsumer<Foo, Long>) Foo::setCompanyId);
        attributeGetterFunctions.put("userId", Foo::getUserId);
        attributeSetterBiConsumers.put(
                "userId", (BiConsumer<Foo, Long>) Foo::setUserId);
        attributeGetterFunctions.put("userName", Foo::getUserName);
        attributeSetterBiConsumers.put(
                "userName", (BiConsumer<Foo, String>) Foo::setUserName);
        attributeGetterFunctions.put("createDate", Foo::getCreateDate);
        attributeSetterBiConsumers.put(
                "createDate", (BiConsumer<Foo, Date>) Foo::setCreateDate);
        attributeGetterFunctions.put("modifiedDate", Foo::getModifiedDate);
        attributeSetterBiConsumers.put(
                "modifiedDate", (BiConsumer<Foo, Date>) Foo::setModifiedDate);
        attributeGetterFunctions.put("id", Foo::getId);
        attributeSetterBiConsumers.put("id", (BiConsumer<Foo, Long>) Foo::setId);
        attributeGetterFunctions.put("modelSpeed", Foo::getModelSpeed);
        attributeSetterBiConsumers.put(
                "modelSpeed", (BiConsumer<Foo, Integer>) Foo::setModelSpeed);
        attributeGetterFunctions.put("field1", Foo::getField1);
        attributeSetterBiConsumers.put(
                "field1", (BiConsumer<Foo, String>) Foo::setField1);
        attributeGetterFunctions.put("field2", Foo::getField2);
        attributeSetterBiConsumers.put(
                "field2", (BiConsumer<Foo, Boolean>) Foo::setField2);
        attributeGetterFunctions.put("field3", Foo::getField3);
        attributeSetterBiConsumers.put(
                "field3", (BiConsumer<Foo, Integer>) Foo::setField3);
        attributeGetterFunctions.put("field4", Foo::getField4);
        attributeSetterBiConsumers.put(
                "field4", (BiConsumer<Foo, Date>) Foo::setField4);
        attributeGetterFunctions.put("field5", Foo::getField5);
        attributeSetterBiConsumers.put(
                "field5", (BiConsumer<Foo, String>) Foo::setField5);
        attributeGetterFunctions.put("status", Foo::getStatus);
        attributeSetterBiConsumers.put(
                "status", (BiConsumer<Foo, Integer>) Foo::setStatus);
        attributeGetterFunctions.put("statusByUserId", Foo::getStatusByUserId);
        attributeSetterBiConsumers.put(
                "statusByUserId", (BiConsumer<Foo, Long>) Foo::setStatusByUserId);
        attributeGetterFunctions.put(
                "statusByUserName", Foo::getStatusByUserName);
        attributeSetterBiConsumers.put(
                "statusByUserName",
                (BiConsumer<Foo, String>) Foo::setStatusByUserName);
        attributeGetterFunctions.put("statusDate", Foo::getStatusDate);
        attributeSetterBiConsumers.put(
                "statusDate", (BiConsumer<Foo, Date>) Foo::setStatusDate);

        _attributeGetterFunctions = Collections.unmodifiableMap(
                attributeGetterFunctions);
        _attributeSetterBiConsumers = Collections.unmodifiableMap(
                (Map) attributeSetterBiConsumers);
    }

    static {
        Map<String, String> attributeNames = new HashMap<>();

        attributeNames.put("id_", "id");

        _attributeNames = Collections.unmodifiableMap(attributeNames);
    }

    static {
        Map<String, Long> columnBitmasks = new HashMap<>();

        columnBitmasks.put("fooId", 1L);

        columnBitmasks.put("groupId", 2L);

        columnBitmasks.put("companyId", 4L);

        columnBitmasks.put("userId", 8L);

        columnBitmasks.put("userName", 16L);

        columnBitmasks.put("createDate", 32L);

        columnBitmasks.put("modifiedDate", 64L);

        columnBitmasks.put("id_", 128L);

        columnBitmasks.put("modelSpeed", 256L);

        columnBitmasks.put("field1", 512L);

        columnBitmasks.put("field2", 1024L);

        columnBitmasks.put("field3", 2048L);

        columnBitmasks.put("field4", 4096L);

        columnBitmasks.put("field5", 8192L);

        columnBitmasks.put("status", 16384L);

        columnBitmasks.put("statusByUserId", 32768L);

        columnBitmasks.put("statusByUserName", 65536L);

        columnBitmasks.put("statusDate", 131072L);

        _columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
    }

    private long _fooId;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private boolean _setModifiedDate;
    private long _id;
    private int _modelSpeed;
    private String _field1;
    private boolean _field2;
    private int _field3;
    private Date _field4;
    private String _field5;
    private int _status;
    private long _statusByUserId;
    private String _statusByUserName;
    private Date _statusDate;
    private transient Map<String, Object> _columnOriginalValues;
    private long _columnBitmask;
    private Foo _escapedModel;

    public FooModelImpl() {
    }

    private static Function<InvocationHandler, Foo>
    _getProxyProviderFunction() {

        Class<?> proxyClass = ProxyUtil.getProxyClass(
                Foo.class.getClassLoader(), Foo.class, ModelWrapper.class);

        try {
            Constructor<Foo> constructor =
                    (Constructor<Foo>) proxyClass.getConstructor(
                            InvocationHandler.class);

            return invocationHandler -> {
                try {
                    return constructor.newInstance(invocationHandler);
                } catch (ReflectiveOperationException
                        reflectiveOperationException) {

                    throw new InternalError(reflectiveOperationException);
                }
            };
        } catch (NoSuchMethodException noSuchMethodException) {
            throw new InternalError(noSuchMethodException);
        }
    }

    public static long getColumnBitmask(String columnName) {
        return _columnBitmasks.get(columnName);
    }

    @Override
    public FooPK getPrimaryKey() {
        return new FooPK(_fooId, _id);
    }

    @Override
    public void setPrimaryKey(FooPK primaryKey) {
        setFooId(primaryKey.fooId);
        setId(primaryKey.id);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new FooPK(_fooId, _id);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((FooPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return Foo.class;
    }

    @Override
    public String getModelClassName() {
        return Foo.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        Map<String, Function<Foo, Object>> attributeGetterFunctions =
                getAttributeGetterFunctions();

        for (Map.Entry<String, Function<Foo, Object>> entry :
                attributeGetterFunctions.entrySet()) {

            String attributeName = entry.getKey();
            Function<Foo, Object> attributeGetterFunction = entry.getValue();

            attributes.put(
                    attributeName, attributeGetterFunction.apply((Foo) this));
        }

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Map<String, BiConsumer<Foo, Object>> attributeSetterBiConsumers =
                getAttributeSetterBiConsumers();

        for (Map.Entry<String, Object> entry : attributes.entrySet()) {
            String attributeName = entry.getKey();

            BiConsumer<Foo, Object> attributeSetterBiConsumer =
                    attributeSetterBiConsumers.get(attributeName);

            if (attributeSetterBiConsumer != null) {
                attributeSetterBiConsumer.accept((Foo) this, entry.getValue());
            }
        }
    }

    public Map<String, Function<Foo, Object>> getAttributeGetterFunctions() {
        return _attributeGetterFunctions;
    }

    public Map<String, BiConsumer<Foo, Object>>
    getAttributeSetterBiConsumers() {

        return _attributeSetterBiConsumers;
    }

    @Override
    public long getFooId() {
        return _fooId;
    }

    @Override
    public void setFooId(long fooId) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _fooId = fooId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _groupId = groupId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _companyId = companyId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() {
        try {
            User user = UserLocalServiceUtil.getUserById(getUserId());

            return user.getUuid();
        } catch (PortalException portalException) {
            return "";
        }
    }

    @Override
    public void setUserUuid(String userUuid) {
    }

    @Override
    public String getUserName() {
        if (_userName == null) {
            return "";
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _userName = userName;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _setModifiedDate = true;

        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _modifiedDate = modifiedDate;
    }

    public boolean hasSetModifiedDate() {
        return _setModifiedDate;
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(Long id) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _id = id;
    }

    /**
     * @deprecated As of Athanasius (7.3.x), replaced by {@link
     * #getColumnOriginalValue(String)}
     */
    @Deprecated
    public long getOriginalId() {
        return GetterUtil.getLong(this.<Long>getColumnOriginalValue("id_"));
    }

    @Override
    public int getModelSpeed() {
        return _modelSpeed;
    }

    @Override
    public void setModelSpeed(int modelSpeed) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _modelSpeed = modelSpeed;
    }

    /**
     * @deprecated As of Athanasius (7.3.x), replaced by {@link
     * #getColumnOriginalValue(String)}
     */
    @Deprecated
    public int getOriginalModelSpeed() {
        return GetterUtil.getInteger(
                this.<Integer>getColumnOriginalValue("modelSpeed"));
    }

    @Override
    public String getField1() {
        if (_field1 == null) {
            return "";
        } else {
            return _field1;
        }
    }

    @Override
    public void setField1(String field1) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _field1 = field1;
    }

    @Override
    public boolean getField2() {
        return _field2;
    }

    @Override
    public boolean isField2() {
        return _field2;
    }

    @Override
    public void setField2(boolean field2) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _field2 = field2;
    }

    /**
     * @deprecated As of Athanasius (7.3.x), replaced by {@link
     * #getColumnOriginalValue(String)}
     */
    @Deprecated
    public boolean getOriginalField2() {
        return GetterUtil.getBoolean(
                this.<Boolean>getColumnOriginalValue("field2"));
    }

    @Override
    public int getField3() {
        return _field3;
    }

    @Override
    public void setField3(int field3) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _field3 = field3;
    }

    @Override
    public Date getField4() {
        return _field4;
    }

    @Override
    public void setField4(Date field4) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _field4 = field4;
    }

    @Override
    public String getField5() {
        if (_field5 == null) {
            return "";
        } else {
            return _field5;
        }
    }

    @Override
    public void setField5(String field5) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _field5 = field5;
    }

    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _status = status;
    }

    @Override
    public long getStatusByUserId() {
        return _statusByUserId;
    }

    @Override
    public void setStatusByUserId(long statusByUserId) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _statusByUserId = statusByUserId;
    }

    @Override
    public String getStatusByUserUuid() {
        try {
            User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

            return user.getUuid();
        } catch (PortalException portalException) {
            return "";
        }
    }

    @Override
    public void setStatusByUserUuid(String statusByUserUuid) {
    }

    @Override
    public String getStatusByUserName() {
        if (_statusByUserName == null) {
            return "";
        } else {
            return _statusByUserName;
        }
    }

    @Override
    public void setStatusByUserName(String statusByUserName) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _statusByUserName = statusByUserName;
    }

    @Override
    public Date getStatusDate() {
        return _statusDate;
    }

    @Override
    public void setStatusDate(Date statusDate) {
        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        _statusDate = statusDate;
    }

    @Override
    public boolean isApproved() {
        if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isDenied() {
        if (getStatus() == WorkflowConstants.STATUS_DENIED) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isDraft() {
        if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isExpired() {
        if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isInactive() {
        if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isIncomplete() {
        if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isPending() {
        if (getStatus() == WorkflowConstants.STATUS_PENDING) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isScheduled() {
        if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
            return true;
        } else {
            return false;
        }
    }

    public long getColumnBitmask() {
        if (_columnBitmask > 0) {
            return _columnBitmask;
        }

        if ((_columnOriginalValues == null) ||
                (_columnOriginalValues == Collections.EMPTY_MAP)) {

            return 0;
        }

        for (Map.Entry<String, Object> entry :
                _columnOriginalValues.entrySet()) {

            if (!Objects.equals(
                    entry.getValue(), getColumnValue(entry.getKey()))) {

                _columnBitmask |= _columnBitmasks.get(entry.getKey());
            }
        }

        return _columnBitmask;
    }

    @Override
    public Foo toEscapedModel() {
        if (_escapedModel == null) {
            Function<InvocationHandler, Foo> escapedModelProxyProviderFunction =
                    EscapedModelProxyProviderFunctionHolder.
                            _escapedModelProxyProviderFunction;

            _escapedModel = escapedModelProxyProviderFunction.apply(
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FooImpl fooImpl = new FooImpl();

        fooImpl.setFooId(getFooId());
        fooImpl.setGroupId(getGroupId());
        fooImpl.setCompanyId(getCompanyId());
        fooImpl.setUserId(getUserId());
        fooImpl.setUserName(getUserName());
        fooImpl.setCreateDate(getCreateDate());
        fooImpl.setModifiedDate(getModifiedDate());
        fooImpl.setId(getId());
        fooImpl.setModelSpeed(getModelSpeed());
        fooImpl.setField1(getField1());
        fooImpl.setField2(isField2());
        fooImpl.setField3(getField3());
        fooImpl.setField4(getField4());
        fooImpl.setField5(getField5());
        fooImpl.setStatus(getStatus());
        fooImpl.setStatusByUserId(getStatusByUserId());
        fooImpl.setStatusByUserName(getStatusByUserName());
        fooImpl.setStatusDate(getStatusDate());

        fooImpl.resetOriginalValues();

        return fooImpl;
    }

    @Override
    public int compareTo(Foo foo) {
        int value = 0;

        value = getField1().compareTo(foo.getField1());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }

        if (!(object instanceof Foo)) {
            return false;
        }

        Foo foo = (Foo) object;

        FooPK primaryKey = foo.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    /**
     * @deprecated As of Athanasius (7.3.x), with no direct replacement
     */
    @Deprecated
    @Override
    public boolean isEntityCacheEnabled() {
        return true;
    }

    /**
     * @deprecated As of Athanasius (7.3.x), with no direct replacement
     */
    @Deprecated
    public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
    }

    /**
     * @deprecated As of Athanasius (7.3.x), with no direct replacement
     */
    @Deprecated
    @Override
    public boolean isFinderCacheEnabled() {
        return true;
    }

    /**
     * @deprecated As of Athanasius (7.3.x), with no direct replacement
     */
    @Deprecated
    public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
    }

    @Override
    public void resetOriginalValues() {
        _columnOriginalValues = Collections.emptyMap();

        _setModifiedDate = false;

        _columnBitmask = 0;
    }

    @Override
    public CacheModel<Foo> toCacheModel() {
        FooCacheModel fooCacheModel = new FooCacheModel();

        fooCacheModel.fooPK = getPrimaryKey();

        fooCacheModel.fooId = getFooId();

        fooCacheModel.groupId = getGroupId();

        fooCacheModel.companyId = getCompanyId();

        fooCacheModel.userId = getUserId();

        fooCacheModel.userName = getUserName();

        String userName = fooCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            fooCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            fooCacheModel.createDate = createDate.getTime();
        } else {
            fooCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            fooCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            fooCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        fooCacheModel.id = getId();

        fooCacheModel.modelSpeed = getModelSpeed();

        fooCacheModel.field1 = getField1();

        String field1 = fooCacheModel.field1;

        if ((field1 != null) && (field1.length() == 0)) {
            fooCacheModel.field1 = null;
        }

        fooCacheModel.field2 = isField2();

        fooCacheModel.field3 = getField3();

        Date field4 = getField4();

        if (field4 != null) {
            fooCacheModel.field4 = field4.getTime();
        } else {
            fooCacheModel.field4 = Long.MIN_VALUE;
        }

        fooCacheModel.field5 = getField5();

        String field5 = fooCacheModel.field5;

        if ((field5 != null) && (field5.length() == 0)) {
            fooCacheModel.field5 = null;
        }

        fooCacheModel.status = getStatus();

        fooCacheModel.statusByUserId = getStatusByUserId();

        fooCacheModel.statusByUserName = getStatusByUserName();

        String statusByUserName = fooCacheModel.statusByUserName;

        if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
            fooCacheModel.statusByUserName = null;
        }

        Date statusDate = getStatusDate();

        if (statusDate != null) {
            fooCacheModel.statusDate = statusDate.getTime();
        } else {
            fooCacheModel.statusDate = Long.MIN_VALUE;
        }

        return fooCacheModel;
    }

    @Override
    public String toString() {
        Map<String, Function<Foo, Object>> attributeGetterFunctions =
                getAttributeGetterFunctions();

        StringBundler sb = new StringBundler(
                (4 * attributeGetterFunctions.size()) + 2);

        sb.append("{");

        for (Map.Entry<String, Function<Foo, Object>> entry :
                attributeGetterFunctions.entrySet()) {

            String attributeName = entry.getKey();
            Function<Foo, Object> attributeGetterFunction = entry.getValue();

            sb.append(attributeName);
            sb.append("=");
            sb.append(attributeGetterFunction.apply((Foo) this));
            sb.append(", ");
        }

        if (sb.index() > 1) {
            sb.setIndex(sb.index() - 1);
        }

        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        Map<String, Function<Foo, Object>> attributeGetterFunctions =
                getAttributeGetterFunctions();

        StringBundler sb = new StringBundler(
                (5 * attributeGetterFunctions.size()) + 4);

        sb.append("<model><model-name>");
        sb.append(getModelClassName());
        sb.append("</model-name>");

        for (Map.Entry<String, Function<Foo, Object>> entry :
                attributeGetterFunctions.entrySet()) {

            String attributeName = entry.getKey();
            Function<Foo, Object> attributeGetterFunction = entry.getValue();

            sb.append("<column><column-name>");
            sb.append(attributeName);
            sb.append("</column-name><column-value><![CDATA[");
            sb.append(attributeGetterFunction.apply((Foo) this));
            sb.append("]]></column-value></column>");
        }

        sb.append("</model>");

        return sb.toString();
    }

    public <T> T getColumnValue(String columnName) {
        columnName = _attributeNames.getOrDefault(columnName, columnName);

        Function<Foo, Object> function = _attributeGetterFunctions.get(
                columnName);

        if (function == null) {
            throw new IllegalArgumentException(
                    "No attribute getter function found for " + columnName);
        }

        return (T) function.apply((Foo) this);
    }

    public <T> T getColumnOriginalValue(String columnName) {
        if (_columnOriginalValues == null) {
            return null;
        }

        if (_columnOriginalValues == Collections.EMPTY_MAP) {
            _setColumnOriginalValues();
        }

        return (T) _columnOriginalValues.get(columnName);
    }

    private void _setColumnOriginalValues() {
        _columnOriginalValues = new HashMap<String, Object>();

        _columnOriginalValues.put("fooId", _fooId);
        _columnOriginalValues.put("groupId", _groupId);
        _columnOriginalValues.put("companyId", _companyId);
        _columnOriginalValues.put("userId", _userId);
        _columnOriginalValues.put("userName", _userName);
        _columnOriginalValues.put("createDate", _createDate);
        _columnOriginalValues.put("modifiedDate", _modifiedDate);
        _columnOriginalValues.put("id_", _id);
        _columnOriginalValues.put("modelSpeed", _modelSpeed);
        _columnOriginalValues.put("field1", _field1);
        _columnOriginalValues.put("field2", _field2);
        _columnOriginalValues.put("field3", _field3);
        _columnOriginalValues.put("field4", _field4);
        _columnOriginalValues.put("field5", _field5);
        _columnOriginalValues.put("status", _status);
        _columnOriginalValues.put("statusByUserId", _statusByUserId);
        _columnOriginalValues.put("statusByUserName", _statusByUserName);
        _columnOriginalValues.put("statusDate", _statusDate);
    }

    private static class EscapedModelProxyProviderFunctionHolder {

        private static final Function<InvocationHandler, Foo>
                _escapedModelProxyProviderFunction = _getProxyProviderFunction();

    }

}